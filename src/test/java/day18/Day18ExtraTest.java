package day18;

import static functionalj.list.intlist.IntFuncList.range;
import static java.util.Comparator.comparing;

import java.util.function.IntPredicate;

import org.junit.Test;

import day18.Day18Part2Test.Position;
import functionalj.list.FuncList;
import functionalj.list.intlist.IntFuncList;

public class Day18ExtraTest {
    
    String maze = """
            #########################################################################
            #...#.........#...#....#........#.#...#.#...#.......####.....##...###...#
            #.#.#.#####.#.#.#.#######.#####.#.#########.#.#######.#######.#.###.#.###
            #.#.#...#.#.#...#.....#...###...#...####....####.##.#.#...#..##.#.###..##
            #.###.###.###########.#.###.#.#######.#####.#########.#.###.###.#.#.###.#
            #.#...#...#...#...#...#...#...#...#...#.#.#.#.#..#..###.#.#..##.#.##..#.#
            #.#.###########.#.#.#####.#.###.###.###.#.###.#########.#########.###.#.#
            #.#...#...#.#.#.#.#.#...#.#.##....#...#.#.#...#...#.....#.#.##......#.###
            #.###.#######.#####.#.#.#.#.#####.#######.#.###.#.#########.#.#####.#.#.#
            #.....#....#..#..##...#.#.#...#.###.###.#.#..######.....###.####..#...###
            #############.#.#.#####.#.###.###.#.###.#.###.#.###.###.#.#####.#.###.###
            ###...#.###..####...#.#.#...#.#####.#.#.#.###.#.#...#.#.###.....##..##..#
            ###.#.#.#.#.###.###.#.#.###.#.#######.###########.#####.#.#########.#####
            #.#.#...#####.#.#.#.###.....#.###.#...#.##...##.#...#...#.#.......#....##
            #.#.#####.#.###.###.#########.#.#######.#.###.#.###.#.#####.#####.#.###.#
            #.###.#.###.#.#.#..##...###...#..#..#.###.#...###...#.......#.....#.###.#
            #####.#.#######.#.###.#.###.#######.#.###.#######.###########.#######.#.#
            ##..#.#.##......#.#..##...#.#...#.#.#.##.##.#...#.#..#.##...#.#......####
            #.#.#.###.#######.###.#.###.#####.#####.###.#.#.#.#.#.#######.#########.#
            ####..#.###.###...##..#.#...#...#.#...###.#.#.#...###.#.......#..#.##.###
            #.#####.###.#.#.###.#####.#####.#####.#.#.#.#.#####.###.#############.#.#
            #.....#...###.###.#.#...#...#...#..##...###.#.###.#.###.#.#..#####..###.#
            #####.#.###.#.#.#.###.#.###.#.###########.#.#.#######.#.#########.#.#.#.#
            #.#...#.#.#.##..#.....#.....#...###....#...##.#.#.#...#...##.....##...#.#
            #.###.#.#.###########.#######.###############.#.#.#.#####.#.###########.#
            ###...#.#...#.#.....#.....#..#.##.............#...#.#...#.###.........#.#
            #.#####.###########.#####.#####.#.#################.#.#.#.#.#####.#.#.#.#
            #.#...#.#.....#.#...##.#......#.#.#..........##.#...#.#.#.#..#..#######.#
            ###.#####.#####.#.###########.#.#.###.#######.#.#.###.#.#.#####.###.#.###
            #.####....#.....#.....####..#.###...###.#..##.#.#.#...#...#.#.......#.#.#
            #.###.#################.###.#.#####.###.#.#######.#.#############.#####.#
            #.#...####....#..####...###.#...#.#...#.#.#.#.#...#.....#...#...#.#...#.#
            #.#####.#######.#.#.#.#####.###.#####.#.#.###.#.#.#####.###.###.#.#.#.#.#
            #.#....##..###..#...#.#...#...#.......#.#..#....###.....##..#..##.#####.#
            #########################.#.#######################.#####.###.#####.#####
            #.#...#.#.#.#...........#.#.#...#.#...#.#...#.....#.#.....#.#...#.#..##.#
            #.#.#.#.#########.#######.#.#######.#####.#.#.###.#.###########.#####.###
            #.#.#.#.#..##..###.##....##..##....##.#...#.#...#...#....#.##.#.#.#######
            #.###.###.#.#.#.###.#.###############.###.#.###.#####.#####.#####.###.#.#
            #.###.....#.#.#.###.#.#..#...#..#...#...#.#.....###...#...#.#...#....####
            #################.###.#.#########.#.###.#.#########.###.#.#.###.#########
            #.#.#...##.##.#.#..##.#...#...#...###...#.......###....##.#.#.#.#.#.###.#
            #.#.#.#.#######.#########.#.###################.#########.###.#.#.#.###.#
            ###.#.#.#.#.##.....#....#.#.#...#...#.....###...#.......###.#.#.##..#...#
            #.###.#############.#####.#.###.#.#.#.#.#####.###.#######.#####.#########
            #.#..##.##..#..######...###.#.#.#.###.#.##..#...#...###.###...#...##..#.#
            #######.#####.###.#########.###.#######.#.#.###.###.#####.#############.#
            #..#......#...#.####..#.#.#.#...#.#.#.###.#.#.#...#.#.#......##........##
            #####.###.#######.#.###.#####.#####.#.#.#.###.###.#.#.#######.#.#######.#
            #...#.###.......#.#..##...#.#..#.###..#...#.#..##.#.##..#...#.##..#...###
            #.#.###.#########.###.###################.#.#####.###.###.#.#####.#.#.###
            #.#...#.....#.###.....#.##..#.....#..#..#...#..##.#.#...#.#.##.#..###.#.#
            #.###.#.#######.#######.###########.###.#######.#.#######.#.#.#####.###.#
            #.#...#.#...##..##..#...#.....#.....#..##.......#.##...##.#.#.....#....##
            ###.#####.#.#.#.#####.#.#.###.#.###.#####.#####.#.#######.#.#.###.#####.#
            #.#.#...#.#..##..#.##.#...#.#.#.#.#.....#.#...#.#.#.......#.#...#....##.#
            ###.###.###########.#.#######.#.#.#####.###.#.#.#.#.#######.#########.#.#
            ###....##..#..#.#...#.#.#..##...#.....#.....#.#.#.#...#.#...#.#...#.###.#
            #.#######.###.#.#.###.#.###.#########.#######.###.###.#.#.###.###.#.#.#.#
            #.#.###...#.##.######.#...#.##...#...#..#.....#...#...#.....#..#....#.#.#
            #.#.#.###.###########.#.#.###############.#####.###.#######.###.#########
            #.#.#.###...#......##.###.....###..##...#...#...#.#.......#...#.#...#...#
            #####.#.###.#.#######.#.#########.#####.###.#.###.#.#####.###.###.#.###.#
            #...###...##.....##...#.#...#...#.###...#.#...#.#.#.....#...#.#...#...#.#
            ###################.###############.#.#.#.#####.###########.#.#.#####.#.#
            #.#......#.#..#.#.#.....#.........###.#...#.....###.........#...#...#...#
            #.#.###################.###########.#.###.###.#####.#############.#####.#
            #.##.#...###...##.#.###.......#.#...#.#.#...#.....#.....#.....#..##.....#
            #############.#.###.#.#######.#.#.###.#.###.###########.#.###.###.#.#####
            ##....###.#...#.#.###...###.#.#...#...#.....#...#.....#.##..#....##...#.#
            #.#####.###.###.#.###.###.###.#####.###.#####.#.#.###.#.#.#.#########.#.#
            ##.......#..#...#...#.##..#.#.......##........#...#.....#.#..#.#..#.....#
            #########################################################################
            """;

    
    record Position(int row, int col) implements Comparable<Position> {
        FuncList<Position> neighbours() {
            return FuncList.of(
                        new Position(row + 1, col()    ),
                        new Position(row    , col() + 1),
                        new Position(row - 1, col()    ),
                        new Position(row    , col() - 1));
        }
        @Override
        public String toString() {
            return "(%d, %d)".formatted(row, col);
        }
        @Override
        public int compareTo(Position o) {
            return comparing(Position::row)
                    .thenComparing(Position::col)
                    .compare(this, o);
        }
    }

    record Grid(String[][] data) {
        String at(Position position) {
            return at(position.row, position.col);
        }
        String at(int row, int col) {
            if (row < 0 || row >= data.length)      return "#";
            if (col < 0 || col >= data[row].length) return "#";
            return data[row][col];
        }
        char charAt(Position position) {
            return at(position).charAt(0);
        }
        char charAt(int row, int col) {
            return at(row, col).charAt(0);
        }
        FuncList<Position> selectPositions() {
            return range(0, data.length).toCache().flatMapToObj(row -> {
                return range(0, data[0].length)
                        .toCache ()
                        .mapToObj(col -> new Position(row, col))
                        .filter  (pos -> ".".equals(pos))
                        ;
            });
        }
        FuncList<Position> select(IntPredicate charSelector) {
            return range(0, data.length).toCache().flatMapToObj(row -> {
                return range(0, data[0].length)
                        .toCache ()
                        .filter  (col -> charSelector.test((int)charAt(row, col)))
                        .mapToObj(col -> new Position(row, col))
                        ;
            });
        }
        
        
        @Override
        public String toString() {
            return FuncList.of(data).map(chs -> FuncList.of(chs).join()).join("\n");
        }
    }
    
    @Test
    public void testGridReduce() {
        var lines = FuncList.of(maze.split("\n")).map(line -> FuncList.of(line.split("")).map(s -> s).toArray(String[]::new)).toArray(String[][]::new);
        var grid  = new Grid(lines);
        
        System.out.println(grid);
    }
    
}
